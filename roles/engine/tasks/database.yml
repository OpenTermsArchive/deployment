- name: Check if {{ name }} base data has already been obtained from {{ repository }}
  ansible.builtin.git:
    repo: '{{ repository }}'
    version: '{{ branch }}'
    dest: '{{ directory }}'
    clone: false
    update: false
    accept_hostkey: true
    key_file: '/home/{{ ansible_user }}/.ssh/ota-bot-key'
  # the `before` property of the return value can tell us if the repository has been cloned already or not,
  # see <https://docs.ansible.com/ansible/latest/collections/ansible/builtin/git_module.html#return-values>
  register: existing_repository
  tags:
    - restart
    - start
    - update
    - setup

- name: Obtain {{ name }} initial data from branch {{ branch }} of {{ repository }}
  ansible.builtin.git:
    repo: '{{ repository }}'
    version: '{{ branch }}'
    dest: '{{ directory }}'
    accept_hostkey: true
    key_file: '/home/{{ ansible_user }}/.ssh/ota-bot-key'
  when: existing_repository.before is defined and not existing_repository.before # if existing_repository.before is null, then the repository is new
  tags:
    - setup

- name: Remove existing locks in {{ name }}
  ansible.builtin.file:
    path: '{{ directory }}/.git/index.lock'
    state: absent
  tags:
    - restart
    - start
    - update

- name: Get latest data from {{ repository }}
  ansible.builtin.command:
    cmd: git fetch origin
    chdir: '{{ directory }}'
  tags:
    - restart
    - start
    - update
    - setup

- name: Clean {{ name }} local copy
  ansible.builtin.command:
    cmd: git reset --hard origin/{{ branch }}
    chdir: '{{ directory }}'
  tags:
    - restart
    - start
    - update
    - setup

- name: Ensure {{ name }} is on branch {{ branch }}
  ansible.builtin.command:
    cmd: git checkout {{ branch }}
    chdir: '{{ directory }}'
  tags:
    - restart
    - start
    - update
    - setup
